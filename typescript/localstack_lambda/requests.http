### Variables
@endpoint = http://localhost:4566
@functionName = user-handler

### ============================================
### LocalStack Lambda - User Handler Tests
### ============================================

### Test 1: Get API Info
# @name getApiInfo
POST {{endpoint}}/2015-03-31/functions/{{functionName}}/invocations
Content-Type: application/json

{
  "httpMethod": "GET",
  "path": "/",
  "headers": {},
  "body": null
}

### Test 2: Create User - John Doe
# @name createUserJohn
POST {{endpoint}}/2015-03-31/functions/{{functionName}}/invocations
Content-Type: application/json

{
  "httpMethod": "POST",
  "path": "/user",
  "headers": {
    "Content-Type": "application/json"
  },
  "body": "{\"email\":\"john.doe@example.com\",\"name\":\"John Doe\",\"age\":30}"
}

### Test 3: Get or Create User - John Doe (should return existing)
# @name getOrCreateUserJohn
POST {{endpoint}}/2015-03-31/functions/{{functionName}}/invocations
Content-Type: application/json

{
  "httpMethod": "POST",
  "path": "/user",
  "headers": {
    "Content-Type": "application/json"
  },
  "body": "{\"email\":\"john.doe@example.com\",\"name\":\"John Doe\",\"age\":30}"
}

### Test 4: Create User - Jane Smith
# @name createUserJane
POST {{endpoint}}/2015-03-31/functions/{{functionName}}/invocations
Content-Type: application/json

{
  "httpMethod": "POST",
  "path": "/user",
  "headers": {
    "Content-Type": "application/json"
  },
  "body": "{\"email\":\"jane.smith@example.com\",\"name\":\"Jane Smith\",\"age\":25}"
}

### Test 5: Get User by ID (use ID from previous response)
# @name getUserById
POST {{endpoint}}/2015-03-31/functions/{{functionName}}/invocations
Content-Type: application/json

{
  "httpMethod": "GET",
  "path": "/user/123e4567-e89b-12d3-a456-426614174000",
  "headers": {},
  "body": null
}

### Test 6: Create User with Invalid Email (should fail)
# @name createUserInvalidEmail
POST {{endpoint}}/2015-03-31/functions/{{functionName}}/invocations
Content-Type: application/json

{
  "httpMethod": "POST",
  "path": "/user",
  "headers": {
    "Content-Type": "application/json"
  },
  "body": "{\"email\":\"invalid-email\",\"name\":\"Invalid User\",\"age\":30}"
}

### Test 7: Create User without Name (should fail)
# @name createUserNoName
POST {{endpoint}}/2015-03-31/functions/{{functionName}}/invocations
Content-Type: application/json

{
  "httpMethod": "POST",
  "path": "/user",
  "headers": {
    "Content-Type": "application/json"
  },
  "body": "{\"email\":\"test@example.com\"}"
}

### Test 8: Create User with Invalid Age (should fail)
# @name createUserInvalidAge
POST {{endpoint}}/2015-03-31/functions/{{functionName}}/invocations
Content-Type: application/json

{
  "httpMethod": "POST",
  "path": "/user",
  "headers": {
    "Content-Type": "application/json"
  },
  "body": "{\"email\":\"test2@example.com\",\"name\":\"Test User\",\"age\":200}"
}

### Test 9: Get Non-existent User
# @name getUserNotFound
POST {{endpoint}}/2015-03-31/functions/{{functionName}}/invocations
Content-Type: application/json

{
  "httpMethod": "GET",
  "path": "/user/non-existent-id",
  "headers": {},
  "body": null
}

### ============================================
### AWS CLI Examples (for reference)
### ============================================

### To invoke via AWS CLI:
# aws --endpoint-url=http://localhost:4566 lambda invoke \
#   --function-name user-handler \
#   --payload '{"httpMethod":"POST","path":"/user","headers":{"Content-Type":"application/json"},"body":"{\"email\":\"test@example.com\",\"name\":\"Test User\",\"age\":30}"}' \
#   output.json

### To list Lambda functions:
# aws --endpoint-url=http://localhost:4566 lambda list-functions

### To check DynamoDB tables:
# aws --endpoint-url=http://localhost:4566 dynamodb list-tables

### To scan Users table:
# aws --endpoint-url=http://localhost:4566 dynamodb scan --table-name Users

